#!/bin/sh
########10########20########30## DOCUMENTATION #50########60########70########80
#
#  OVERVIEW
#  ========
#  This script will attempt to clean common caches, trashes, and things of
#  that sort to free up space on an OSX system. It aims to be roughly
#  comparable in featureset to CCLeaner for Mac.
#  
########10########20########30#### LISCENSE ####50########60########70########80
#  Copyright (c) 2016, Charles Daniels
#  All rights reserved.
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
# 
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 
#  3. Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
# 
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#  
########10########20########30########40########50########60########70########80

index () {
  current="$(pwd)"
  if [ ! -e "$1" ] ; then
    return 1
  fi
  if [ -d "$1" ] ; then
    cd "$1"
    printf "$1 \t" >> "$2"
    SIZE=$(BLOCKSIZE=512 du | tail -n 1 | cut -f1)
    echo $(($SIZE * 512)) >> "$2"
    cd "$current"
  fi
  if [ -f "$1" ] ; then
    printf "$1 \t" >> "$2"
    SIZE=$(BLOCKSIZE=512 du "$1" | tail -n 1 | cut -f1)
    echo $(($SIZE * 512)) >> "$2"
  fi
}

remove () {
  if [ ! -e "$1" ] ; then
    echo "WARNING 63: $1 does not exist, cannot remove it"
    return 1
  fi
  if [ -d "$1" ] ; then
    printf "removing $1... "
    rm -rf "$1" > /dev/null 2>&1
    if [ $? -ne 0 ] ; then
      echo "FAIL"
      echo "ERROR 71: failed to remove directory $1"
      return 1
    fi
    echo "DONE"
    return 0
  fi
  if [ -f "$1" ] ; then
    printf "removing $1... "
    rm -f "$1" > /dev/null 2>&1
    if [ $? -ne 0 ] ; then
      echo "FAIL"
      echo "ERROR 81: failed to remove file $1"
      return 1
    fi
    echo "DONE"
    return 0
  fi
}

APPNAME="mac-cleanup"
echo $APPNAME
TIMESTAMP="$(iso8601date)"
APPTAG="$APPNAME-$$-$TIMESTAMP"
TARGETS="$HOME/.Trash
$HOME/Library/Caches
$HOME/Library/Cookies 
$HOME/Library/Application Support/Google/Chrome/Default/Cookies
$HOME/Library/Application Support/Google/Chrome/Default/Application Cache"

temputils $APPTAG create
TMP_DIR=$(temputils $APPTAG get)

printf "indexing files... "

IDX="$TMP_DIR/index.txt"
touch "$IDX"
if [ $? -ne 0 ] ; then
  echo "ERROR 63: failed to create index file!"
  exit 1
fi

while read -r target ; do
  index "$target" "$IDX"
done <<< "$TARGETS"

echo "DONE"
echo "Junk directory sizes (in bytes)..."
cat "$IDX"



counts=$(cut -f2 < "$IDX")
bytes="$(( ${counts//$'\n'/+} ))"
echo "Total: $bytes bytes, $(echo $bytes| format-bytes)"

printf "Are you sure you want to delete these files/directories? This action "
echo "CAN NOT be undone! "
prompt-bool "proceed?"

if [ $? -ne 0 ] ; then
  echo "ERROR 96: user declined to proceed with operation"
  temputils $APPTAG destroy
  exit 1
fi

echo "The script must close Chrome, Safari, and Firefox to proceed, is this ok?"
prompt-bool "proceed?"

if [ $? -ne 0 ] ; then
  echo "ERROR 111: user declined to proceed with operation"
  temputils $APPTAG destroy
  exit 1
fi

osascript -e 'tell application "safari" to quit'
osascript -e 'tell application "firefox" to quit'
osascript -e 'tell application "chrome" to quit'

while read -r target ; do
  remove "$target"
done <<< "$TARGETS"

temputils $APPTAG destroy