#!/bin/sh

# .SCRIPTDOC

# Script to share files using the Fastmail (or other FTP-based) file storage
# system.

# .DESCRIPTION

# The use-case for this script is to fill the same use case as publicly-visible
# Dropbox links, using Fastmail's FTP upload and file storage features. It
# could probably be used with other sides that support FTP upload and HTTP
# download also.

# This script is configured by ~/.config/share-file/share-file.cfg, which
# should be a source-able sh script with the following variables:
#
# * ``SHARE_FILE_FTP_HOST`` - FTP host, for FastMail this will be
# ``ftp.fastmail.com``
#
# * ``SHARE_FILE_FTP_PATH`` - path of root dir on the FTP server to upload to.
# For FastMail, this should be ``/username.fastmail.com/files/``
#
# * ``SHARE_FILE_HTTP_PATH`` - left-side of the URL, which when concatenated
# with the file uploaded will be a publicly resolvable URL to the file.
#
# Additionally, this script requires two tokens to be added to the
# ``get-token`` database:
#
# * ``share-file-username`` FTP username to use
#
# * ``share-file-password`` FTP password to use

# On the Fastmail side, you will need to create a new folder, then create a
# "files only" site. The folder you choose to populate it from will wind up
# being ``foldername`` in ``SHARE_FILE_FTP_PATH``, and the website URL will be
# ``SHARE_FILE_HTTP_PATH``. The token ``share-file-username`` will be your
# primary Fastmail email address, and ``share-file-password`` should be an
# apps-password with only FTP access permissions.

# For additional security, the file will be placed in a folder whose name is a
# (shortened) random UUID, so if you upload ``foo.txt``, it will wind up in
# ``example.com/sharedfolder/some-uuid/foo.txt``. Assuming you also have
# directory browsing disabled, this will prevent an attacker without a file's
# full URL from guessing it via dictionary attack.

# This script will also create a file, at the same URL, but with .meta appended
# to the file name. This metadata file include the file name, the hostname and
# username which uploaded, the time of the upload, and the shasum of the file.

# .SYNTAX

# $1 . . . Path to file to share (/dev/stdin for standard in)

# $2 . . . (optional) name to use on the remote end

# URL of the uploaded file will be printed to standard out

# .ENDOC

INPUT_FILE="$1"
FILE_NAME="$2"
CONFIG_FILE="$HOME/.config/share-file/share-file.cfg"

# validate argument count
if [ $# -lt 1 ] ; then
	echo "ERROR: incorrect usage" > /dev/stderr
	echo "$0 [file] [name - optional]" > /dev/stderr
	exit 1
fi

# infer file name if none given
if [ $# -lt 2 ] ; then
	FILE_NAME="$(basename "$INPUT_FILE")"
fi

# ensure that spaces do not appear in the file name
FILE_NAME="$(echo "$FILE_NAME" | tr ' ' '_')"

# validate that the config file exists
if [ ! -e "$CONFIG_FILE" ] ; then
	echo "ERROR: no config file at '$CONFIG_FILE'" > /dev/stderr
	exit 1
fi

. "$CONFIG_FILE"

TMP_FILE="/tmp/$(uuidgen)"
LOG_FILE="/tmp/$(uuidgen)"
META_FILE="/tmp/$(uuidgen)"
REMOTE_DIR="$(uuidgen | cut -d- -f 1)"
REMOTE_PATH="$SHARE_FILE_FTP_PATH/$REMOTE_DIR"
REMOTE_FILE="$REMOTE_PATH/$FILE_NAME"

# If input is standard in or another stream, we might get in trouble using cp,
# hence the slightly unorthodox copying method.
cat "$INPUT_FILE" > "$TMP_FILE"

# Sanity check that the input file was copied successfully, and that it is
# nonzero in size.
if [ $(cat "$TMP_FILE" | wc -c) -lt 1 ] ; then
	echo "ERROR: input file is zero bytes" > /dev/stderr
	rm -f "$LOG_FILE"
	rm -f "$TMP_FILE"
	rm -f "$META_FILE"
	exit 1
fi

# Validate that we can get the credentials that we want.
if ! get-token --get "share-file-username" > /dev/null 2>&1 ; then
	echo "ERROR: no token 'share-file-username'" > /dev/stderr
	rm -f "$LOG_FILE"
	rm -f "$TMP_FILE"
	rm -f "$META_FILE"
	exit 1
fi

if ! get-token --get "share-file-password" > /dev/null 2>&1 ; then
	echo "ERROR: no token 'share-file-username'" > /dev/stderr
	rm -f "$LOG_FILE"
	rm -f "$TMP_FILE"
	rm -f "$META_FILE"
	exit 1
fi

# generate the metadata file
echo "Input File: $INPUT_FILE" >> "$META_FILE"
echo "File Name: $FILE_NAME" >> "$META_FILE"
echo "Upload Date: $(date)" >> "$META_FILE"
echo "Uploaded From Host: $(hostname)" >> "$META_FILE"
echo "Uploaded By User: $(whoami)" >> "$META_FILE"
echo "File shasum: $(shasum "$TMP_FILE" | cut -d' ' -f 1)" >> "$META_FILE"

# Fetch FTP credentials
FTP_USERNAME="$(get-token --get "share-file-username")"
FTP_PASSWORD="$(get-token --get "share-file-password")"

if ! lftp -u "$FTP_USERNAME,$FTP_PASSWORD" "$SHARE_FILE_FTP_HOST" \
	-e "mkdir $REMOTE_PATH ; put \"$TMP_FILE\" -o \"$REMOTE_FILE\" ; put \"$META_FILE\" -o \"$REMOTE_FILE.meta\" ; bye" \
	> "$LOG_FILE" 2>&1 ; then
	echo "ERROR: FTP upload failed" > /dev/stderr
	cat "$LOG_FILE" > /dev/stderr
	rm -f "$LOG_FILE"
	rm -f "$TMP_FILE"
	rm -f "$META_FILE"
	exit 1
fi

echo "$SHARE_FILE_HTTP_PATH/$REMOTE_DIR/$FILE_NAME"
rm -f "$LOG_FILE"
rm -f "$TMP_FILE"
	rm -f "$META_FILE"
