#!/usr/bin/env python3

# .SCRIPTDOC

descr = """
# This script is used to interact with API tokens on disk in a programmatic
# way. This is specifically useful for writing scripts that need to access API
# tokens. The value of this approach is that all tokens are aggregated into a
# single file that can be readily transferred between systems with a single
# ``rsync`` command.
""".replace('# ', ' ')

# The token store is not intended to be modified directly, but is stored in
# YAML format, and it resides in a location configured via --tokenstore.

# .SYNTAX

# Run this script with the ``--help`` parameter for usage information.

# .AUTHOR

# Charles Daniels


# .LICENSE

# Copyright 2018 Charles Daniels

#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:

#  1. Redistributions of source code must retain the above copyright notice,
#  this list of conditions and the following disclaimer.

#  2. Redistributions in binary form must reproduce the above copyright notice,
#  this list of conditions and the following disclaimer in the documentation
#  and/or other materials provided with the distribution.

#  3. Neither the name of the copyright holder nor the names of its
#  contributors may be used to endorse or promote products derived from this
#  software without specific prior written permission.

#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.

# .ENDOC

import os
import sys
import argparse
import pathlib
import yaml

def main():

    parser = argparse.ArgumentParser(description=descr)

    parser.add_argument("--tokenstore", "-t",
                         default=os.path.join(str(pathlib.Path.home()),
                        ".config/tokenstore/tokenstore.yaml"),
                         help="Specify " +
                        "path to token store file. (default: ~/.config/" +
                        "tokenstore/tokenstore.yaml)")

    parser.add_argument("--add", "-a", default=None, nargs=2,
                        help="Add a new token to the store, overwriting it " +
                        " if it exists already. First argument is name, " +
                        " and the second is the token string.")

    parser.add_argument("--get", "-g", default=None,
                        help="Retrieve the specified token string " +
                        "by it's name.")

    parser.add_argument("--remove", "-r", default=None, help="Delete the" +
                        " specified key from the tokenstore by it's name")

    parser.add_argument("--list", "-l", default=False, action="store_true",
                        help="List available token names.")

    args = parser.parse_args()

    tokenstore_dir = os.path.dirname(args.tokenstore)
    if not os.path.exists(tokenstore_dir):
        os.makedirs(tokenstore_dir)

    working_tokenstore = {}
    exitcode = 0

    if os.path.exists(args.tokenstore):
        with open(args.tokenstore, 'r') as f:
            working_tokenstore = yaml.load(f)

    if args.remove is not None:
        working_tokenstore.pop(args.remove)

    if args.add is not None:
        token_name = args.add[0]
        token_str = args.add[1]
        working_tokenstore[token_name] = token_str

    if args.get is not None:
        if args.get in working_tokenstore:
            print(working_tokenstore[args.get])
        else:
            exitcode = 1

    if args.list:
        for k in working_tokenstore:
            print(k)

    with open(args.tokenstore, 'w') as f:
        yaml.dump(working_tokenstore, f)

    exit(exitcode)


if __name__ == "__main__":
    main()
