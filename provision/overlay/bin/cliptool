#!/bin/sh

# OVERVIEW
# ========
# Tool for interacting with clipboards on various platforms. Currently,
# support is implemented, although not fully tested for pbcopy (OSX), xsel
# and xclip (generic UNIX), and copyQ (cross platform).
#
# Because it supports the most common and popular clipboard managers
# available, this tool should work correctly on most UNIX systems. At the
# very least, it should work on an macOS system, as pbcopy/pbpaste are OS
# components for Mac. Most Linux systems will come with either xsel or xclip.
#
# Note that if no supported clipboard manager is found, cliptool will
# failover to keeping clipboard contents in /tmp/cliptool_clipboard.txt.
#
# USAGE
# =====
#
#  $1 . . . . if `copy` - copy standard input to the system clipboard
#             if `get`  - output the system clipboard contents to stdout
#
# CLIPBOARD MANAGER PRIORITY
# ==========================
# The clipboard manager which is used is selected by testing for the presence
# of a given binary in $PATH. If multiple clipboard managers are present, one
# will be chosen base on the following order:
#
# * copyQ
# * pbcopy/pbpaste
# * xsel
# * xclip
#
# EVIRONMENT VARIABLES
# ====================
# CLIPTOOL_CLIPBOARD_MANAGER . . . if set, the specified clipboard manager
#                                  will be used instead of following the
#                                  above hierarchy. Note that the specified
#                                  clipboard manager must be one of the
#                                  supported ones, or the program will crash.

ACTION="$1"

# select clipboard manager
CLIPBOARD_MANAGER="ERROR"

command -v "xclip" > /dev/null
if [ $? -eq 0 ] ; then
  CLIPBOARD_MANAGER="xclip"
fi

command -v "xsel" > /dev/null
if [ $? -eq 0 ] ; then
  CLIPBOARD_MANAGER="xsel"
fi

command -v "pbcopy" > /dev/null
if [ $? -eq 0 ] ; then
  CLIPBOARD_MANAGER="pbcopy"
fi

command -v "copyq" > /dev/null
if [ $? -eq 0 ] ; then
  CLIPBOARD_MANAGER="copyq"
fi

if (: "${CLIPTOOL_CLIPBOARD_MANAGER?}") 2>/dev/null; then
  CLIPBOARD_MANAGER="$CLIPTOOL_CLIPBOARD_MANAGER"
  command -v "$CLIPBOARD_MANAGER" > /dev/null
  if [ $? -ne 0 ] ; then
    echo "ERROR 104: selected clipboard manager $CLIPBOARD_MANAGER not found"
    exit 1
  fi
fi

if [ "$CLIPBOARD_MANAGER" = "ERROR" ] ; then
  echo "WARNING 59: failed to detect any installed clipboard manager"
  echo "INFO: failing over to temp file"
  CLIPBOARD_MANAGER="failover"
  touch /tmp/cliptool_clipboard.txt
fi


if [ "$#" -lt 1 ] ; then
  echo "ERROR 43: at least one argument is required"
  echo "USAGE: cliptool [command]"
  exit 1
fi


case $ACTION in
  copy)
    case $CLIPBOARD_MANAGER in
      pbcopy)
        pbcopy < /dev/stdin
        ;;
      xclip)
        xclip < /dev/stdin
        ;;
      copyq)
        #TODO: this needs to be tested
        copyq -e "x = input(); copySelection(x); copy(x); add(x)" < /dev/stdin
        ;;
      xsel)
        xsel -i < /dev/stdin
        ;;
      failover)
        cat /dev/stdin > /tmp/cliptool_clipboard.txt
        ;;
    esac
    ;;
  get)
    case $CLIPBOARD_MANAGER in
      pbcopy)
        pbpaste
        ;;
      xclip)
        xclip -o
        ;;
      xsel)
        xsel -o
        ;;
      copyq)
        copyq read 0
        ;;
      failover)
        cat /tmp/cliptool_clipboard.txt
        ;;
    esac
    ;;
  *)
    echo "ERROR 112: no such action $ACTION"
    exit 1
    ;;
esac

