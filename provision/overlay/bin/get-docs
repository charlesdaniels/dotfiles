#!/bin/sh

# .SCRIPTDOC

# This script attempts to find documentation and/or help for a particular
# command automatically. Supported documentation formats include, in order of
# precedence:
#
# * shelldoc
# * toolchest-style documentation (no longer used for new scripts, this type of
#   documentation was specific to my "Toolchest" project, and some of my
#   scripts that haven't needed re-writing still use it)
# * man pages
# * command-line help flags

# .SYNTAX

# $@ space delimited files to search

# .LICENSE

# Copyright 2018, Charles A. Daniels
# This software is distributed under the BSD 3-clause license. The full text
# of this software's license may be retrieved from this URL:
# https://github.com/charlesdaniels/dotfiles/blob/master/LICENSE

# .ENDOC

set -u

# break down multiple target files into just one
if [ $# -gt 1 ] ; then
	for t in $@ ; do
		$0 $t
	done
	exit 0
fi

TARGET_FILE="$1"

# if the target file is not found on disk, search for it in PATH
if [ ! -e "$TARGET_FILE" ] ; then
	if [ -e "$(which "$TARGET_FILE")" ] ; then
		TARGET_FILE="$(which "$TARGET_FILE")"
	fi
fi

# assert that TARGET_FILE now points to a real file on disk
if [ ! -e "$TARGET_FILE" ] ; then
	echo "ERROR: '$TARGET_FILE' does not exist and not in PATH!" > /dev/stderr
	exit 1
fi

if [ -x "$(which shelldoc)" ] ; then
	# attempt to extract shelldoc documentation
	SHELLDOC_DOC=""
	if grep -qI . "$TARGET_FILE" ; then
		# this should prevent us from operating on a binary file with
		# this approach.
		SHELLDOC_DOC="$(shelldoc --notoc --input "$TARGET_FILE" 2>&1)"
		if [ $? -ne 0 ] ; then
			# shelldoc encountered an error
			SHELLDOC_DOC=""
		fi
	fi

	# if shelldoc had less than 5 lines of output, we assume it was
	# empty
	if [ "$(echo "$SHELLDOC_DOC" | grep -v '^$' | wc -l)" -ge 6 ] ; then
		# it would be better to use rst2html5 here directly,
		# since links does a better job rendering in an
		# interactive terminal, however I can't seem to get it
		# to work for this use case
		echo "$SHELLDOC_DOC" | rst2text | less
		exit $?
	fi
fi


# attempt to extract toolchest-style documentation
TOK1='########10########20########30## DOCUMENTATION #50########60########70########80'
TOK2='########10########20########30'

TOOLCHEST_DOC=""
if grep -qI . "$TARGET_FILE" ; then
	# this should prevent us from operating on a binary file with this
	# approach.
	TOOLCHEST_DOC="$(sed -n '/'"$TOK1"'/{:a;n;/'"$TOK2"'/b;p;ba}' "$TARGET_FILE" | cut -c2-)"
fi
if [ "$(echo "$TOOLCHEST_DOC" | wc -l)" -gt 1 ] ; then
	echo "$TOOLCHEST_DOC" | less
	exit $?
fi

# check if the target has a man page
if man "$(basename "$TARGET_FILE")" > /dev/null 2>&1 ; then
	# the man page exists
	man "$(basename "$TARGET_FILE")"
	exit $?
fi

# try to guess how to get command-line help
for guess in --help -h -? -help ; do
	ATTEMPT="$(timeout 1s $TARGET_FILE $guess 2>&1)"
	if [ $? -eq 0 ] ; then
		# this did not produce an error
		if [ "$(echo "$ATTEMPT" | wc -l)" -gt 3 ] ; then
			# there were at least 3 lines of output
			echo "$ATTEMPT" | less
			exit 0
		fi
	fi
done
