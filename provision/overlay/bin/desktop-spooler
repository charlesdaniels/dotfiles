#!/bin/sh

# .SCRIPTDOC

# This script is used to hook other scripts that need to run under various
# conditions, and which I have not found better hooks for. This is highly
# specific to my setup, and probably will be of minimal use to anyone else.

# This script runs a loop every $DESKTOP_SPOOLER_INTERVAL. When this loop runs,
# it polls lsusb to see if $DOCK_DEVICE exists, using this information to
# populate $DOCK_STATE. If $DOCK_STATE changes, the script restore-sanity is
# executed, and the file $DOCK_SPOOLER_DIR/dock_status is updated.

# .ENDOC

set -e
set -u

log_msg () {
	echo $@ > /dev/stderr 2>&1
	echo $@ >> "$LOG_FILE" 2>&1
}

DESKTOP_SPOOLER_DIR="$HOME/.dspool"
DESKTOP_SPOOLER_INTERVAL=5
DOCK_DEVICE="17ef:1005"
LOG_FILE="$DESKTOP_SPOOLER_DIR/log"

if [ ! -d "$DESKTOP_SPOOLER_DIR" ] ; then
	log_msg "INFO: Spooler directory '$DESKTOP_SPOOLER_DIR' does not exist, creating it..."
	mkdir -p "$DESKTOP_SPOOLER_DIR"
fi

if [ ! -d "$DESKTOP_SPOOLER_DIR" ] ; then
	log_msg "ERROR: spooler dir '$DESKTOP_SPOOLER_DIR' does not exist and creating it failed."
	exit 1
fi

PREV_DOCK_STATE=""
DOCK_STATE=""
PREV_MONITOR_STATE=""
MONITOR_STATE=""

DOCKED_SCREENLAYOUT="$HOME/.screenlayout/$(hostname).docked.screenlayout.sh"
UNDOCKED_SCREENLAYOUT="$HOME/.screenlayout/$(hostname).undocked.screenlayout.sh"

log_msg "DOCKED_SCREENLAYOUT: $DOCKED_SCREENLAYOUT"
log_msg "UNDOCKED_SCREENLAYOUT: $UNDOCKED_SCREENLAYOUT"

# keep the log file from overflowing
mv "$LOG_FILE" "$LOG_FILE.prev"

while true ; do
	if lsusb | grep "$DOCK_DEVICE" > /dev/null 2>&1 ; then
		DOCK_STATE="DOCKED"
	else
		DOCK_STATE="UNDOCKED"
	fi

	if [ "$DOCK_STATE" = "$PREV_DOCK_STATE" ] ; then
		# do nothing
		printf ""
	else
		log_msg "INFO: at $(date) dock state $PREV_DOCK_STATE -> $DOCK_STATE"
		restore-sanity # reset wallpaper and reload xmodmap
		# write new dock state to status file for i3bar
		printf "$DOCK_STATE" > "$DESKTOP_SPOOLER_DIR/dock_status"
		sleep 2
		# run it again in case any USB devices have been enumerated
		# since we docked
		restore-sanity
		sleep 1

		if [ "$DOCK_STATE" = "DOCKED" ] ; then
			# this implies we have gone from undocked to docked
			if [ -e "$DOCKED_SCREENLAYOUT"  ] ; then
				log_msg "INFO: executing screenlayout file '$DOCKED_SCREENLAYOUT'"
				if ! sh "$DOCKED_SCREENLAYOUT" ; then
					log_msg "WARN: executing screenlayout file failed"
				fi
			fi
		fi

		if [ "$DOCK_STATE" = "DOCKED" ] ; then
			# this implies we have gone from docked to undocked
			if [ -e "$UNDOCKED_SCREENLAYOUT"  ] ; then
				log_msg "INFO: executing screenlayout file '$UNDOCKED_SCREENLAYOUT'"
				if ! sh "$UNDOCKED_SCREENLAYOUT" ; then
					log_msg "WARN: executing screenlayout file failed"
				fi
			fi
		fi
	fi

	PREV_DOCK_STATE="$DOCK_STATE"

	MONITOR_STATE="$(xrandr | shasum)"
	if [ "$MONITOR_STATE" != "$PREV_MONITOR_STATE" ] ; then
		log_msg "INFO: at $(date) monitor state changed"
		restore-sanity
	fi

	PREV_MONITOR_STATE="$MONITOR_STATE"

	sleep $DESKTOP_SPOOLER_INTERVAL
done
