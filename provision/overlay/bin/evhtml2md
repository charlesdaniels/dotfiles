#!/usr/bin/env python3

descr="""A tool which consumes HTML exported from Evernote and emits Markdown
suitable for inclusion in a Sphinx wiki. The resulting Markdown is intended
to be consumed by reCommonMark."""

import argparse
import os
import sys
from lxml import etree
from lxml import html
from lxml.html.clean import Cleaner
from bs4 import BeautifulSoup
import ast

cleaner = Cleaner()
cleaner.javascript = True
#  cleaner.style = True
#  cleaner.kill_tags = ["font"]


evhtml2md_version = "0.0.1"

parser = argparse.ArgumentParser(description=descr)

parser.add_argument("--version", "-v", action='version', version="%(prog)s " +
                    evhtml2md_version)

parser.add_argument("--input", "-i", default=sys.stdin,
                    help="File to read HTML from. (default: standard in)")

parser.add_argument("--output", "-o", default=sys.stdout,
                    help="File to write output to. (default: standard out)")

args = parser.parse_args()
if args.input is not sys.stdin:
    args.input = open(args.input, 'r')

if args.output is not sys.stdout:
    args.output = open(args.output, 'w')

#  tree = cleaner.clean_html(html.parse(args.input))
tree = html.parse(args.input)
#  tree = etree.fromstring(html.tostring(tree))

# extract the note's title
note_title = "UNKNOWN TITLE"
title_node = tree.xpath("//head/title")
if len(title_node) > 0:
    note_title = title_node[0].text
sys.stderr.write("note title is: {}\n".format(note_title))

tags = []
# fetch the node containing the tags
tags_node = tree.xpath(
        '//table/tr/td/b[text() [contains(., "Tags:")]]/../../td/i')
if len(tags_node) > 0:
    # the tags are stored as a comma-delimited list
    tags = tags_node[0].text.split(',')

sys.stderr.write("found tags: {}\n".format(tags))

args.output.write("# {}\n\n".format(note_title))

note_body = tree.xpath("//body/*")
note_body = ''.join([str(html.tostring(x)) for x in note_body])
#  note_body = BeautifulSoup(note_body, 'html.parser').prettify()
note_body = str(ast.literal_eval(note_body))
args.output.write(note_body)
args.output.write("\n")

for tag in tags:
    args.output.write("```eval_rst\n")
    args.output.write(".. index:: {}\n".format(tag))
    args.output.write("```\n")
    args.output.write("\n")

args.input.close()
args.output.close()
