#!/usr/bin/env python3

# Copyright 2018, Charles A. Daniels
# This software is distributed under the BSD 3-clause license. The full text
# of this software's license may be retrieved from this URL:
# https://github.com/charlesdaniels/dotfiles/blob/master/LICENSE

import argparse
import taglib
import yaml
import sys

parser = argparse.ArgumentParser(description="Dump tag information from " +
                                 "pytaglib for the specified (files). Data " +
                                 "is dumped in YAML format. Note that " +
                                 "if stdin is not a tty, each line of input" +
                                 " on it will be treated as a file to dump " +
                                 "tags for. This is useful for pipes.")

parser.add_argument("files", nargs="*", help="List of files to dump tags for",
                    default=[])
parser.add_argument("--input", "-i", default=None, help="A file to read " +
                    "where each line is a file to dump tags for.")
parser.add_argument("--tag_filter", "-t", default=None, help="Only tags" +
                    " listed here are sent to output. If unspecified, all" +
                    " tags are shown.", nargs="*")

args = parser.parse_args()

file_list = args.files
if args.input is not None:
    with open(args.input, 'r') as f:
        for line in f:
            file_list.append(line.strip())

if not sys.stdin.isatty():
    for line in sys.stdin:
        file_list.append(line.strip())

data_list = []
for f in file_list:
    song = None
    try:
        song = taglib.File(f)
    except OSError:
        continue
    data = song.tags
    for key in data:
        if len(data[key]) is 1:
            data[key] = data[key][0]
    drop_keys = []
    if args.tag_filter is not None:
        drop_keys = [key for key in data if key not in args.tag_filter]
    for key in drop_keys:
        data.pop(key)
    data_list.append(song.tags)

print(yaml.dump(data_list, default_flow_style=False))
