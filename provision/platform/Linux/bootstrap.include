STATIC_GET_URL='https://raw.githubusercontent.com/minos-org/minos-static/master/static-get'

TEMP_DIR="/tmp/$(uuidgen)"
mkdir -p "$TEMP_DIR"

printf "INFO: Detecting system information"

CPU_ARCH="$(arch)"
printf "."

if [ -x "$(which vim)" ] ; then
	VIM_VERSION="$(vim --version | head -n 1  | cut -d' ' -f 5)"
else
	VIM_VERSION="NONE"
fi
printf "."

if [ -x "$(which bash)" ] ; then
	BASH_VERSION="$(bash --version | head -n 1  | cut -d' ' -f 4)"
else
	BASH_VERSION="NONE"
fi
printf "."

if [ -x "$(which git)" ] ; then
	GIT_VERSION="$(git --version | cut -d ' ' -f 3)"
else
	GIT_VERSION="NONE"
fi
printf "."


if [ -x "$(which python3)" ] ; then
	PYTHON3_VERSION="$(python3 --version | cut -d' ' -f 2)"
else
	PYTHON3_VERSION="NONE"
fi
printf "."

if [ -x "$(which curl)" ] ; then
	CURL_VERSION="$(curl --version | head -n1 | cut -d' ' -f 2)"
else
	CURL_VERSION="NONE"
fi
printf "."

echo " DONE"

echo "INFO: VIM_VERSION . . . . . $VIM_VERSION"
echo "INFO: PYTHON3_VERSION . . . $PYTHON3_VERSION"
echo "INFO: CURL_VERSION  . . . . $CURL_VERSION"
echo "INFO: BASH_VERSION  . . . . $BASH_VERSION"
echo "INFO: GIT_VERSION . . . . . $GIT_VERSION"

BOOTSTRAP_OK="YES"
if [ "$CPU_ARCH" != "i686" ] ; then
	if [ "$CPU_ARCH" != "x86_64" ] ; then
		echo "WARNING: Linux bootstrap script does not support $CPU_ARCH"
		BOOSTRAP_OK="NO"
	fi
fi

if [ "$BOOTSTRAP_OK" = "YES" ] ; then

	# If this is the first run, we may need to install static-get
	if [ ! -x "$(which static-get)" ] ; then
		printf "INFO: bootstrapping static-get... "
		STATIC_GET="$TEMP_DIR/static-get"
		if ! download_file "$STATIC_GET_URL" "$STATIC_GET" ; then
			echo "FAIL"
			echo "ERROR: failed to download static-get"
			exit 1
		fi
		chmod +x "$STATIC_GET"
		echo "DONE"
	else
		STATIC_GET="$(which static-get)"
	fi

	if [ ! -e "$HOME/bin" ] ; then
		mkdir -p "$HOME/bin"
	fi

	if ! echo "$VIM_VERSION" | grep '[7-9]\.[4-9][0-9]*.*' > /dev/null 2>&1 ; then
		printf "INFO: fetcing vim... "
		if ! "$STATIC_GET" --arch "$CPU_ARCH" --download "$TEMP_DIR/" vim > /dev/null 2>&1 ; then
			echo "FAIL"
		else
			echo "DONE"
		fi
	fi

	if ! echo "$GIT_VERSION" | grep '[2-9]\.[2-9][0-9]*\.[0-9]*' > /dev/null 2>&1 ; then
		printf "INFO: fetching git... "
		if ! "$STATIC_GET" --arch "$CPU_ARCH" --download "$TEMP_DIR/" git-2 > /dev/null 2>&1 ; then
			echo "FAIL"
		else
			echo "DONE"
		fi
	fi

	if [ "$CURL_VERSION" = "NONE" ] ; then
		printf "INFO: fetching curl... "
		if ! "$STATIC_GET" --arch "$CPU_ARCH" --download "$TEMP_DIR" curl > /dev/null 2>&1 ; then
			echo "FAIL"
		else
			echo "DONE"
		fi
	fi

	printf "INFO: extracting files.."
	for f in "$TEMP_DIR"/*.tar.* ; do
		if [ ! -e "$f" ] ; then
			# handle case where there are no tarballs to extract
			continue
		fi
		tar -C "$TEMP_DIR" -xf "$f"
		printf "."
	done

	echo " DONE"

	for f in "$TEMP_DIR"/bin/* "$TEMP_DIR"/usr/bin/* "$TEMP_DIR"/usr/local/bin/* ; do
		if [ -x "$f" ] ; then
			echo "INFO: installing binary $(basename "$f")"
			cp "$f" "$HOME/bin"
		fi
	done

	export PATH="$HOME/bin:$PATH"

fi

rm -rf "$TEMP_DIR"
