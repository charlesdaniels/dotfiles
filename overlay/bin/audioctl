#!/bin/sh

# .SCRIPTDOC

# A simple script to perform various audio and multimedia control tasks.

# .SYNTAX

# $1 should be one of the following:
#
# up . . . increase volume by one step
# down . . decrease volume by one step
# mute . . mute volume
# play . . media play, if possible
# pause  . media pause if possible
# toggle . toggle media playback (play/pase) if possible
# next . . next track, if possible
# prev . . previous track ,if possible

#
# for quite operation (no desktop notifications), mate $2 'quiet'

# .LICENSE

# Copyright 2018, Charles A. Daniels
# This software is distributed under the BSD 3-clause license. The full text
# of this software's license may be retrieved from this URL:
# https://github.com/charlesdaniels/dotfiles/blob/master/LICENSE

# .ENDOC

set -e
set -u

if [ $# -eq 0 ] ; then
	VERB="help"
else
	VERB="$1"
fi

QUIET="NO"
if [ $# -gt 1 ] ; then
	if [ "$2" = "quiet" ] ; then
		QUIET="YES"
	fi
fi

send_notification () {
	if [ "$QUIET" != "YES" ] ; then
		notify-send --urgency=low --expire-time=750 $@
		echo "send notification $@"
	fi

}

VOLUME_MANAGER="UNDEFINED"
if [ -x "$(which pactl)" ] ; then
	VOLUME_MANAGER="pactl"
elif [ -x "$(which amixer)" ] ; then
	VOLUME_MANAGER="amixer"
fi

HAS_CMUS="NO"
if [ -x "$(which cmus)" ] ; then
	HAS_CMUS="YES"
fi

HAS_MPC="NO"
if [ -x "$(which mpc)" ] ; then
	HAS_MPC="YES"
fi

if [ "$VOLUME_MANAGER" = "pactl" ] ; then
	PACTL_SINK="$(pacmd stat | \
		awk -F": " '/^Default sink name: /{print $2}')"
fi

run_cmus_cmd () {
	if [ -x "$(which cmus-remote)" ] ; then
		if cmus-remote -Q > /dev/null 2>&1 ; then
			cmus-remote $@
		fi
	fi
}

run_mpc_cmd () {
	if [ -x "$(which mpc)" ] ; then
		mpc $@
	fi
}

case "$VERB" in
	up)
		case "$VOLUME_MANAGER" in
			pactl)
				if [ $($0 get | tr -d '%') -lt 100 ] ; then
					# this ensure we dont boost volume
					# over 100
					pactl set-sink-mute "$PACTL_SINK" 0
					pactl set-sink-volume "$PACTL_SINK" +5%
				fi
				send_notification "raised volume"
				;;
			amixer)
				amixer -q set Master 2dB+
				amixer -q set Master unmute
				amixer -q set Speaker unmute
				amixer -q set Headphone unmute
				send_notification "raised volume"
				;;
			*)
				echo "ERROR: no known volume manager available"
				exit 1
				;;
		esac
		;;
	down)
		case "$VOLUME_MANAGER" in
			pactl)
				pactl set-sink-volume "$PACTL_SINK" -5%
				send_notification "decreased volume"
				;;
			amixer)
				amixer -q set Master 2dB-
				send_notification "decreased volume"
				;;
			*)
				echo "ERROR: no known volume manager available"
				exit 1
				;;
		esac
		;;
	mute)
		case "$VOLUME_MANAGER" in
			pactl)
				pactl set-sink-volume "$PACTL_SINK" -100%
				pactl set-sink-mute "$PACTL_SINK" 1
				send_notification "muted volume"
				;;
			amixer)
				amixer -q set Master 100%-
				amixer -q set Master mute
				send_notification "muted volume"
				;;
			*)
				echo "ERROR: no known volume manager available"
				exit 1
				;;
		esac
		;;
	get)
		case "$VOLUME_MANAGER" in
			pactl)
				pacmd list-sinks |
				awk '/^[^a-zA-Z0-9]+name: /{indefault = $2 == "<'$PACTL_SINK'>"}
				    /^[^a-zA-Z0-9]+volume: / && indefault {print $5; exit}'
				;;
			*)
				echo "ERROR: no known volume manager available"
				exit 1
				;;
		esac
		;;

	play)
		send_notification "playing music"
		if [ "$HAS_CMUS" = "YES" ] ; then
			run_cmus_cmd --play
		fi

		if [ "$HAS_MPC" = "YES" ] ; then
			run_mpc_cmd play
		fi
		;;
	pause)
		send_notification "pausing music"
		if [ "$HAS_CMUS" = "YES" ] ; then
			run_cmus_cmd --pause
		fi

		if [ "$HAS_MPC" = "YES" ] ; then
			run_mpc_cmd pause
		fi
		;;
	toggle)
		send_notification "toggled play/pause"
		if [ "$HAS_CMUS" = "YES" ] ; then
			run_cmus_cmd --pause
		fi

		if [ "$HAS_MPC" = "YES" ] ; then
			run_mpc_cmd toggle
		fi
		;;
	next)
		send_notification "skipping track"
		if [ "$HAS_CMUS" = "YES" ] ; then
			run_cmus_cmd --next
		fi

		if [ "$HAS_MPC" = "YES" ] ; then
			run_mpc_cmd next
		fi
		;;
	prev)
		send_notification "previous track"
		if [ "$HAS_CMUS" = "YES" ] ; then
			run_cmus_cmd --prev
		fi

		if [ "$HAS_MPC" = "YES" ] ; then
			run_mpc_cmd prev
		fi
		;;
	help)
		echo "usage: $(basename $0) [verb]"
		exit 1
		;;
	*)

		echo "ERROR: unrecognized verb '$VERB'"
		exit 1
		;;
esac
