#!/usr/bin/env python3

descr = """
Read floating point scores in on standard input, generate a histogram using
matplotlib and display it.
"""

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats
import argparse
import sys

def main():

    parser = argparse.ArgumentParser(description=descr)

    parser.add_argument("--max", "-m", default=100.0, type=float,
            help="Maximum possible score on assignment. (default: 100)")

    parser.add_argument("--output", "-o", default=None,
            help="Save output to file");

    parser.add_argument("--title", "-t", default="Score Histogram",
            help="Set figure title");

    parser.add_argument("--spec", "-s", default="A:90,B:80,C:70,D:60,F:0",
            help="Letter grade assignment specification, as a comma " +
            "separated list of label:threshold pairs. " +
            "(default: A:90,B:80,C:70,D:60,F:0)")

    parser.add_argument("--display", "-d", default=False, action="store_true",
            help="Display the histogram in a graphical window.")

    parser.add_argument("--bins", "-b", default=10, type=int,
            help="Override number of bins. (default: 10)")

    args = parser.parse_args()

    labels = {}
    bins = {}
    thresholds = []

    for s in args.spec.split(","):

        label, val = None, None
        try:
            label, val = s.split(":")
            val = float(val)
        except Exception as e:
            sys.stderr.write("FATAL: invalid spec: {}\n".format(e))
            sys.exit(1)

        if (val in labels) or (label in bins):
            sys.stderr.write("FATAL: duplicate value or label '{}' or '{}'\n"
                    .format(val, label))
            sys.exit(1)

        # associate a given threshold with a label
        labels[val] = label

        # list of thresholds for comparisons
        thresholds.append(val)

        # this will ultimately be the bar height for the bar chart
        bins[label] = 0

    thresholds.sort()

    # read input
    for line in sys.stdin:
        line = 100.0 * float(line) / args.max
        label="error"

        # calculate the maximum threshold that the current value exceeds
        for t in thresholds:
            if line > t:
                label = labels[t]

        if label == "error":
            sys.stderr.write("FATAL: value '{}' exceeds no threshold in spec\n"
                    .format(line))
            sys.exit(1)

        assert(label in bins)

        # increment the corresponding bin
        bins[label] += 1

    # generate lists for matplotlib
    names = []
    values = []
    for label in reversed(sorted(bins.keys())):
        names.append(label)
        values.append(bins[label])

    assert(len(names) == len(values))

    y_pos = np.arange(len(names))

    plt.bar(y_pos, values, align='center')
    plt.xticks(y_pos, names)
    plt.xlabel("")
    plt.ylabel("number of scores")
    plt.title(args.title)

    if args.output is not None:
        plt.savefig(args.output)

    if args.display:
        plt.show()

if __name__ == "__main__":
    main()
