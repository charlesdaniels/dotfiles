#!/usr/bin/env python3

# .SCRIPTDOC
# Converts the text streamed in on standard input to Quartus .mif format.
# Output is written to standard out.
#
# .SYNTAX
# Run this file with --help to view documentation.

# .LICENSE

# Copyright 2018, Charles A. Daniels
# This software is distributed under the BSD 3-clause license. The full text
# of this software's license may be retrieved from this URL:
# https://github.com/charlesdaniels/dotfiles/blob/master/LICENSE
# .ENDOC

import argparse
import sys

parser = argparse.ArgumentParser(description="convert ASCII to .mif")
parser.add_argument("--width", "-w", default=8, type=int,
        help="Specify WIDTH value. Default: 8")
parser.add_argument("--depth", "-d", default=131072, type=int,
        help="Specify DEPTH value. Default: 131072")
parser.add_argument("--addressradix", "-a", default="UNS",
        help="Sepcify ADDRESS_VALUE value. Default: UNS")
parser.add_argument("--dataradix", "-t", default="UNS",
        help="Specify DATA_RADIX value. Default: UNS")
parser.add_argument("--verbose", "-v", default=False,
        action="store_true", help="Print verbose output to stderr")

args = parser.parse_args()

stdout = sys.stdout
stderr = sys.stderr
stdin  = sys.stdin

def write_verbose(s):
    if args.verbose:
        s = str(s)
        stderr.write("VERBOSE: " + s)

write_verbose("arguments: {}\n".format(args))

# generate header
write_verbose("generating header... \n")
stdout.write("WIDTH={};\n".format(args.width))
stdout.write("DEPTH={};\n".format(args.depth))
stdout.write("ADDRESS_RADIX={};\n".format(args.addressradix))
stdout.write("DATA_RADIX={};\n".format(args.dataradix))
stdout.write("CONTENT BEGIN\n")

# generate body
write_verbose("begin generating content...\n")
index = 0
for line in stdin:
    write_verbose("begin processing line {}\n".format(line))
    for c in line:
        i = ord(c)
        write_verbose("{} -> {}\n".format(c, i))
        stdout.write("\t{}\t:\t{};\n".format(index, i))
        index += 1

# generate tail
write_verbose("begin generating tail...\n")
stdout.write("[{}..{}]\t:\t:0;\n".format(index, args.depth - 1))
stdout.write("END;")

