#!/bin/sh

# .SCRIPTDOC
# Back up a git repository to a local file. The file produced will be a tarfile
# containing the git repository as a git .bundle file, as well as an xz
# compressed tarball of the current HEAD for the master branch of the repo. The
# latter is included so the archive produced is still useful if it needs to be
# unpacked on a system without git, or if the git bundle format is ever
# depricated.
#
# .SYNTAX
#
# $1 . . . URL of repository to back up
#
# $2 . . . Path to backup file (.tar extension will be added automatically)

# .LICENSE

# Copyright 2018, Charles A. Daniels
# This software is distributed under the BSD 3-clause license. The full text
# of this software's license may be retrieved from this URL:
# https://github.com/charlesdaniels/dotfiles/blob/master/LICENSE
# .ENDOC

set -o nounset
set -o errexit
set -o pipefail

if [ $# -ne 2 ] ; then
	echo "ERROR: incorrect usage" > /dev/stderr
	echo "$0 [URL] [local file]" > /dev/stderr
	exit 1
fi

REPO_URL="$1"
BACKUP_FILE="$(realpath "$2")"
TMP_DIR="/tmp/$(uuidgen)"

if [ -e "$BACKUP_FILE" ] ; then
	echo "ERROR: backup file '$BACKUP_FILE' already exists." > /dev/stderr
	exit 1
fi

mkdir "$TMP_DIR"
cd "$TMP_DIR"

printf "INFO: cloning repository... " > /dev/stderr
git clone --quiet --mirror --bare "$REPO_URL"
echo "DONE" > /dev/stderr

REPO_NAME="$(basename "$(find . -type d -iname "*.git" -print | head -n 1)" .git)"
echo "INFO: inferred repo name is '$REPO_NAME'"

printf "INFO: creating bundle... " > /dev/stderr
mkdir "$TMP_DIR/$REPO_NAME"
cd "$REPO_NAME.git"
if ! git bundle create "$TMP_DIR/$REPO_NAME/$REPO_NAME.bundle" --all > "$TMP_DIR/bundle.log" 2>&1 ; then
	echo "FAIL" > /dev/stderr
	echo "ERROR: git bundle failed, logfile follows..."
	cat "$TMP_DUR/bundle.log" > /dev/stderr
	exit 1
fi
echo "DONE" > /dev/stderr

printf "INFO: arching master... " > /dev/stderr
cd "$TMP_DIR/$REPO_NAME"
git clone --quiet ./$REPO_NAME.bundle ./master
rm -rf ./master/.git
tar cfJ master.tar.xz master/
rm -rf ./master/
echo "DONE" > /dev/stderr

printf "INFO: generating backup file... " > /dev/stderr
cd "$TMP_DIR"
tar cf "$REPO_NAME.tar" "$REPO_NAME"
mv "$REPO_NAME.tar" "$BACKUP_FILE.tar"
echo "DONE" > /dev/stderr

printf "INFO: cleaning up... " > /dev/stderr
cd
rm -rf "$TMP_DIR"
echo "DONE" > /dev/stderr

